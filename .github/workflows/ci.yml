name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run ruff (linting)
        run: |
          uv run ruff check . --output-format=github

      - name: Run ruff (formatting)
        run: |
          uv run ruff format --check .

      - name: Run mypy (type checking)
        run: |
          uv run mypy services/ infrastructure/ --ignore-missing-imports

  # test:
  #   name: Test Suite
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: ["3.9", "3.10", "3.11", "3.12"]
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v3
  #       with:
  #         version: "latest"

  #     - name: Set up Python ${{ matrix.python-version }}
  #       run: uv python install ${{ matrix.python-version }}

  #     - name: Install dependencies
  #       run: |
  #         uv sync --dev

  #     - name: Run tests with coverage
  #       run: |
  #         uv run pytest --cov=services --cov=infrastructure --cov-report=xml --cov-report=term-missing

  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v4
  #       with:
  #         file: ./coverage.xml
  #         flags: unittests
  #         name: codecov-umbrella
  #         fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Build package
        run: |
          uv build

      - name: Check package
        run: |
          uv run python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run safety check
        run: |
          uv run pip install safety
          uv run safety check --json

      - name: Run bandit security scan
        run: |
          uv run pip install bandit[toml]
          uv run bandit -r services/ infrastructure/ -f json

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run integration tests
        run: |
          # Run integration tests at root level
          uv run python -m pytest test_*.py -v --tb=short
        env:
          # Add environment variables for tests if needed
          ENVIRONMENT: test